@page "/"
@using System.Globalization
@implements IDisposable

<h1>CurrentUICulture: @CultureInfo.CurrentUICulture</h1>
<h5>DateTime: @StaticData.Now.ToLongDateString() @StaticData.Now.ToLongTimeString()</h5>

<RadzenButton Text="Switch to Spanish" Click="() => SwitchToSpanish()"></RadzenButton>
<RadzenButton Text="Switch to English" Click="() => SwitchToEnglish()"></RadzenButton>
<RadzenButton Text="UpdateDate" Click="() => UpdateDate()"></RadzenButton>

@code
{
    static class StaticData
    {
        public static DateTime Now { get; private set; }= DateTime.UtcNow;
        public static EventHandler<DateTime> DateUpdated = (e, t) => { };

        public static void UpdateDate()
        {
            Now = DateTime.UtcNow;
            DateUpdated.Invoke(null, Now);
        }
    }

    [Inject] public NavigationManager UriHelper { get; set; }

    protected override void OnInitialized()
    {
        StaticData.DateUpdated += DateUpdated;
        base.OnInitialized();
    }

    private void DateUpdated(object? sender, DateTime e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        StaticData.DateUpdated -= DateUpdated;
    }

    void UpdateDate()
    {
        StaticData.UpdateDate();
    }

    void SwitchToSpanish()
    {
        UpdateDate();
        Switch("es-ES");

    }
    void SwitchToEnglish()
    {
        UpdateDate();
        Switch("en-US");
    }

    void Switch(string culture)
    {
        var redirect = new Uri(UriHelper.Uri).GetComponents(UriComponents.PathAndQuery | UriComponents.Fragment, UriFormat.UriEscaped);
        var query = $"?culture={Uri.EscapeDataString((string)culture)}&redirectUri={redirect}";
        UriHelper.NavigateTo("Culture/SetCulture" + query, forceLoad: true);
    }
}


